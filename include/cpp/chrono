// ----------------------------------------------------------------------------
// @file    chrono
// @brief   std::chrono main header file to use in the library. Additional
//          type traits helper structures and 'abs()' implementation. This
//          should  be the only header file included when std::chrono
//          functionality is required.
// @date    6 July 2018
// ----------------------------------------------------------------------------
//
// Xarmlib 0.1.0 - https://github.com/hparracho/Xarmlib
// Copyright (c) 2018 Helder Parracho (hparracho@gmail.com)
//
// See README.md file for additional credits and acknowledgments.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// ----------------------------------------------------------------------------

#ifndef __XARMLIB_CPP_CHRONO
#define __XARMLIB_CPP_CHRONO

// Include a local copy of the 'chrono' header file provided by libstdc++-V3 / GCC 8.1
#include "std/std_chrono"




namespace std
{
namespace chrono
{




// Type traits helper
template<typename T>
struct is_duration
{
    static constexpr bool value = false;
};

template<typename Rep, typename Period>
struct is_duration<duration<Rep, Period>>
{
    static constexpr bool value = true;
};




#if __cplusplus < 201703L

// Provide 'abs()' function if not available
template<class Rep, class Period,
class = std::enable_if_t<duration<Rep, Period>::min() < duration<Rep, Period>::zero()>>
constexpr duration<Rep, Period> abs(duration<Rep, Period> d)
{
    return d >= d.zero() ? d : -d;
}

#endif // __cplusplus < 201703L




} // namespace chrono
} // namespace std




#endif // __XARMLIB_CPP_CHRONO
