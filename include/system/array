// ----------------------------------------------------------------------------
// @file    array
// @brief   array header file to use in the library. Additional array generator
//          helper function 'make_array_n()' implementation. This should be the
//          only header file included when std::array functionality is required.
// @date    23 May 2018
// ----------------------------------------------------------------------------
//
// Xarmlib 0.1.0 - https://github.com/hparracho/Xarmlib
// Copyright (c) 2018 Helder Parracho (hparracho@gmail.com)
//
// See README.md file for additional credits and acknowledgments.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// ----------------------------------------------------------------------------

#ifndef __XARMLIB_SYSTEM_ARRAY
#define __XARMLIB_SYSTEM_ARRAY

#if __cplusplus >= 201703L
// Include standard C++ library header provided
// by the compiler if C++17 (v201703) is available.
#include <array>
#else
// Include local version of array header file if not.
#include "system/std_array"
#endif




namespace private_array
{

template<std::size_t Size, typename T, std::size_t... indexes>
constexpr auto make_array_n_impl(T&& value, std::index_sequence<indexes...>)
{
    // Use the comma operator to expand the variadic pack.
    // Move the last element in if possible. Order of evaluation is well-defined
    // for aggregate initialization, so there is no risk of copy-after-move.
    return std::array<std::decay_t<T>, Size>{ (static_cast<void>(indexes), value)..., std::forward<T>(value) };
}

} // namespace private_array




template<typename T>
constexpr auto make_array_n(std::integral_constant<std::size_t, 0>, T&&)
{
    return std::array<std::decay_t<T>, 0>{};
}

template<std::size_t Size, typename T>
constexpr auto make_array_n(std::integral_constant<std::size_t, Size>, T&& value)
{
    return private_array::make_array_n_impl<Size>(std::forward<T>(value), std::make_index_sequence<Size - 1>{});
}

template<std::size_t Size, typename T>
constexpr auto make_array_n(T&& value)
{
    return make_array_n(std::integral_constant<std::size_t, Size>{}, std::forward<T>(value));
}




#endif // __XARMLIB_SYSTEM_ARRAY
