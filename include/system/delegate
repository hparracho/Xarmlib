// ----------------------------------------------------------------------------
// @file    delegate
// @brief   Delegate template class.
// @date    26 April 2018
// ----------------------------------------------------------------------------
//
// Xarmlib 0.1.0 - https://github.com/hparracho/Xarmlib
// Copyright (c) 2018 Helder Parracho (hparracho@gmail.com)
//
// See README.md file for additional credits and acknowledgments.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// The code below is based on the original work from Nikita Chernyi (@nikitablack).
// Copyright (c) 2016 Nikita Chernyi (https://github.com/nikitablack).
//
// The original file and a detailed description of the implementation can be
// found on the following URLs:
// (https://github.com/nikitablack/cpp-tests/blob/master/Delegate/Delegate.h)
// (https://nikitablack.github.io/2016/04/12/Generic-C-delegates.html)
// ----------------------------------------------------------------------------

#ifndef __XARMLIB_SYSTEM_DELEGATE
#define __XARMLIB_SYSTEM_DELEGATE

#include <cstddef>

namespace xarmlib
{




template<typename T>
class Delegate;




template<typename Ret, typename ...Args>
class Delegate<Ret(Args...)>
{
    using FunctionType = Ret(*)(void*, Args...);

public:

    // --------------------------------------------------------------------
    // PUBLIC MEMBER FUNCTIONS
    // --------------------------------------------------------------------

    Delegate() = default;

    template<Ret(*global_func)(Args...)>
    static Delegate create()
    {
        return Delegate { nullptr, &invoke_global<global_func> };
    }

    template<typename T, Ret(T::*member_func)(Args...)>
    static Delegate create(T* obj)
    {
        return Delegate { obj, &invoke_member<T, member_func> };
    }

    template<typename T>
    static Delegate create(T* t)
    {
        return Delegate { t, &invoke_functor<T> };
    }

    Delegate& operator=(const Delegate& other)
    {
        m_callee   = other.m_callee;
        m_function = other.m_function;

        return (*this);
    }

    Delegate& operator=(std::nullptr_t)
    {
        m_callee   = nullptr;
        m_function = nullptr;

        return (*this);
    }

    Ret operator()(Args... args) const
    {
        return m_function(m_callee, args...);
    }

    explicit operator bool() const
    {
        return (m_function != nullptr);
    }

    bool operator==(std::nullptr_t) const
    {
        return (m_function == nullptr);
    }

    bool operator!=(std::nullptr_t) const
    {
        return (m_function != nullptr);
    }

#if 0
    bool operator==(const Delegate& other) const
    {
        return (m_callee == other.m_callee) && (m_function == other.m_function);
    }

    bool operator!=(const Delegate& other) const
    {
        return (m_callee != other.m_callee) || (m_function != other.m_function);
    }
#endif

private:

    // --------------------------------------------------------------------
    // PRIVATE MEMBER FUNCTIONS
    // --------------------------------------------------------------------

    Delegate(void* obj, FunctionType func) : m_callee   { obj  },
                                             m_function { func }
    {}

    template<Ret(*global_func)(Args...)>
    static Ret invoke_global(void*, Args... args)
    {
        return global_func(args...);
    }

    template<typename T, Ret(T::*member_func)(Args...)>
    static Ret invoke_member(void* callee, Args... args)
    {
        return (static_cast<T*>(callee)->*member_func)(args...);
    }

    template<typename T>
    static Ret invoke_functor(void* functor, Args... args)
    {
        return (*static_cast<T*>(functor))(args...);
    }

    // --------------------------------------------------------------------
    // PRIVATE DEFINITIONS
    // --------------------------------------------------------------------

    void*        m_callee   { nullptr };
    FunctionType m_function { nullptr };
};




} // namespace xarmlib

#endif // __XARMLIB_SYSTEM_DELEGATE
